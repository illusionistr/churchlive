import '../../domain/entities/church.dart';

class ChurchModel extends Church {
  const ChurchModel({
    required super.id,
    required super.name,
    super.slug,
    super.description,
    super.denominationId,
    super.denominationName,
    super.countryId,
    super.countryName,
    super.countryCode,
    super.city,
    super.address,
    super.postalCode,
    super.latitude,
    super.longitude,
    required super.timezone,
    super.primaryLanguageId,
    super.primaryLanguageName,
    super.primaryLanguageCode,
    super.websiteUrl,
    super.contactEmail,
    super.phoneNumber,
    super.logoUrl,
    super.coverImageUrl,
    required super.verificationStatus,
    required super.isActive,
    required super.memberCount,
    super.memberCountRange,
    super.foundedYear,
    super.socialLinks,
    super.streamingSchedule,
    super.youtubeChannelId,
    super.youtubeChannelUrl,
    super.autoLiveDetection,
    required super.createdAt,
    required super.updatedAt,
    required super.averageRating,
    required super.reviewCount,
    required super.liveStreamsCount,
    required super.followersCount,
    super.isCurrentlyLive,
    super.liveStreamTitle,
    super.liveStreamUrl,
    super.lastLiveCheck,
  });

  factory ChurchModel.fromJson(Map<String, dynamic> json) {
    // Extract denomination info from nested object
    final denominationData = json['denominations'] as Map<String, dynamic>?;
    final countryData = json['countries'] as Map<String, dynamic>?;
    final languageData = json['languages'] as Map<String, dynamic>?;

    return ChurchModel(
      id: json['id'] as String,
      name: json['name'] as String,
      slug: json['slug'] as String?,
      description: json['description'] as String?,
      denominationId: json['denomination_id'] as String?,
      denominationName: denominationData?['name'] as String?,
      countryId: json['country_id'] as String?,
      countryName: countryData?['name'] as String?,
      countryCode: countryData?['code'] as String?,
      city: json['city'] as String?,
      address: json['address'] as String?,
      postalCode: json['postal_code'] as String?,
      latitude: json['latitude'] != null
          ? (json['latitude'] as num).toDouble()
          : null,
      longitude: json['longitude'] != null
          ? (json['longitude'] as num).toDouble()
          : null,
      timezone: json['timezone'] as String,
      primaryLanguageId: json['primary_language_id'] as String?,
      primaryLanguageName: languageData?['name'] as String?,
      primaryLanguageCode: languageData?['code'] as String?,
      websiteUrl: json['website_url'] as String?,
      contactEmail: json['contact_email'] as String?,
      phoneNumber: json['phone_number'] as String?,
      logoUrl: json['logo_url'] as String?,
      coverImageUrl: json['cover_image_url'] as String?,
      verificationStatus: ChurchVerificationStatus.values.firstWhere(
        (e) => e.name == (json['verification_status'] as String),
        orElse: () => ChurchVerificationStatus.unverified,
      ),
      isActive: json['is_active'] as bool,
      memberCount: json['member_count'] as int? ?? 0,
      memberCountRange: json['member_count_range'] as String?,
      foundedYear: json['founded_year'] as int?,
      socialLinks: json['social_links'] as Map<String, dynamic>?,
      streamingSchedule: json['streaming_schedule'] as Map<String, dynamic>?,
      youtubeChannelId: json['youtube_channel_id'] as String?,
      youtubeChannelUrl: json['youtube_channel_url'] as String?,
      autoLiveDetection: json['auto_live_detection'] as bool? ?? true,
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
      averageRating: json['average_rating'] != null
          ? (json['average_rating'] as num).toDouble()
          : 0.0,
      reviewCount: json['review_count'] as int? ?? 0,
      liveStreamsCount: json['live_streams_count'] as int? ?? 0,
      followersCount: json['followers_count'] as int? ?? 0,
      // Parse live status information (now stored directly in churches table)
      isCurrentlyLive: json['is_live'] as bool? ?? false,
      liveStreamTitle: json['live_stream_title'] as String?,
      liveStreamUrl: json['live_stream_url'] as String?,
      lastLiveCheck: json['last_live_check'] != null
          ? DateTime.parse(json['last_live_check'] as String)
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'slug': slug,
      'description': description,
      'denomination_id': denominationId,
      'country_id': countryId,
      'city': city,
      'address': address,
      'postal_code': postalCode,
      'latitude': latitude,
      'longitude': longitude,
      'timezone': timezone,
      'primary_language_id': primaryLanguageId,
      'website_url': websiteUrl,
      'contact_email': contactEmail,
      'phone_number': phoneNumber,
      'logo_url': logoUrl,
      'cover_image_url': coverImageUrl,
      'verification_status': verificationStatus.name,
      'is_active': isActive,
      'member_count': memberCount,
      'member_count_range': memberCountRange,
      'founded_year': foundedYear,
      'social_links': socialLinks,
      'streaming_schedule': streamingSchedule,
      'youtube_channel_id': youtubeChannelId,
      'youtube_channel_url': youtubeChannelUrl,
      'auto_live_detection': autoLiveDetection,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  factory ChurchModel.fromEntity(Church church) {
    return ChurchModel(
      id: church.id,
      name: church.name,
      slug: church.slug,
      description: church.description,
      denominationId: church.denominationId,
      denominationName: church.denominationName,
      countryId: church.countryId,
      countryName: church.countryName,
      countryCode: church.countryCode,
      city: church.city,
      address: church.address,
      postalCode: church.postalCode,
      latitude: church.latitude,
      longitude: church.longitude,
      timezone: church.timezone,
      primaryLanguageId: church.primaryLanguageId,
      primaryLanguageName: church.primaryLanguageName,
      primaryLanguageCode: church.primaryLanguageCode,
      websiteUrl: church.websiteUrl,
      contactEmail: church.contactEmail,
      phoneNumber: church.phoneNumber,
      logoUrl: church.logoUrl,
      coverImageUrl: church.coverImageUrl,
      verificationStatus: church.verificationStatus,
      isActive: church.isActive,
      memberCount: church.memberCount,
      memberCountRange: church.memberCountRange,
      foundedYear: church.foundedYear,
      socialLinks: church.socialLinks,
      streamingSchedule: church.streamingSchedule,
      youtubeChannelId: church.youtubeChannelId,
      youtubeChannelUrl: church.youtubeChannelUrl,
      autoLiveDetection: church.autoLiveDetection,
      createdAt: church.createdAt,
      updatedAt: church.updatedAt,
      averageRating: church.averageRating,
      reviewCount: church.reviewCount,
      liveStreamsCount: church.liveStreamsCount,
      followersCount: church.followersCount,
      isCurrentlyLive: church.isCurrentlyLive,
      liveStreamTitle: church.liveStreamTitle,
      liveStreamUrl: church.liveStreamUrl,
      lastLiveCheck: church.lastLiveCheck,
    );
  }

  Church toEntity() {
    return Church(
      id: id,
      name: name,
      slug: slug,
      description: description,
      denominationId: denominationId,
      denominationName: denominationName,
      countryId: countryId,
      countryName: countryName,
      countryCode: countryCode,
      city: city,
      address: address,
      postalCode: postalCode,
      latitude: latitude,
      longitude: longitude,
      timezone: timezone,
      primaryLanguageId: primaryLanguageId,
      primaryLanguageName: primaryLanguageName,
      primaryLanguageCode: primaryLanguageCode,
      websiteUrl: websiteUrl,
      contactEmail: contactEmail,
      phoneNumber: phoneNumber,
      logoUrl: logoUrl,
      coverImageUrl: coverImageUrl,
      verificationStatus: verificationStatus,
      isActive: isActive,
      memberCount: memberCount,
      memberCountRange: memberCountRange,
      foundedYear: foundedYear,
      socialLinks: socialLinks,
      streamingSchedule: streamingSchedule,
      youtubeChannelId: youtubeChannelId,
      youtubeChannelUrl: youtubeChannelUrl,
      autoLiveDetection: autoLiveDetection,
      createdAt: createdAt,
      updatedAt: updatedAt,
      averageRating: averageRating,
      reviewCount: reviewCount,
      liveStreamsCount: liveStreamsCount,
      followersCount: followersCount,
      isCurrentlyLive: isCurrentlyLive,
      liveStreamTitle: liveStreamTitle,
      liveStreamUrl: liveStreamUrl,
      lastLiveCheck: lastLiveCheck,
    );
  }
}
