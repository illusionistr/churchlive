import '../../domain/entities/livestream.dart';

class LivestreamModel extends Livestream {
  const LivestreamModel({
    required super.id,
    required super.churchId,
    required super.title,
    super.description,
    super.slug,
    required super.streamUrl,
    required super.platform,
    super.platformId,
    super.thumbnailUrl,
    super.scheduledStart,
    super.scheduledEnd,
    super.actualStart,
    super.actualEnd,
    required super.status,
    required super.isFeatured,
    super.languageId,
    super.languageName,
    super.languageCode,
    required super.viewerCount,
    required super.maxViewers,
    required super.isRecurring,
    required super.recurrencePattern,
    super.recurrenceEndDate,
    super.parentStreamId,
    super.streamQuality,
    required super.isChatEnabled,
    super.chatUrl,
    super.youtubeVideoId,
    super.vimeoVideoId,
    super.facebookVideoId,
    super.customEmbedUrl,
    super.isLive = false,
    super.liveViewerCount = 0,
    super.totalViews = 0,
    required super.tags,
    super.customFields,
    required super.createdAt,
    required super.updatedAt,
    super.churchName,
    super.churchLogoUrl,
    super.churchCity,
    super.churchCountry,
  });

  factory LivestreamModel.fromJson(Map<String, dynamic> json) {
    return LivestreamModel(
      id: json['id'] as String,
      churchId: json['church_id'] as String,
      title: json['title'] as String,
      description: json['description'] as String?,
      slug: json['slug'] as String?,
      streamUrl: json['stream_url'] as String,
      platform: StreamPlatform.values.firstWhere(
        (e) => e.name == (json['platform'] as String),
        orElse: () => StreamPlatform.custom,
      ),
      platformId: json['platform_id'] as String?,
      thumbnailUrl: json['thumbnail_url'] as String?,
      scheduledStart: json['scheduled_start'] != null
          ? DateTime.parse(json['scheduled_start'] as String)
          : null,
      scheduledEnd: json['scheduled_end'] != null
          ? DateTime.parse(json['scheduled_end'] as String)
          : null,
      actualStart: json['actual_start'] != null
          ? DateTime.parse(json['actual_start'] as String)
          : null,
      actualEnd: json['actual_end'] != null
          ? DateTime.parse(json['actual_end'] as String)
          : null,
      status: StreamStatus.values.firstWhere(
        (e) => e.name == (json['status'] as String),
        orElse: () => StreamStatus.scheduled,
      ),
      isFeatured: json['is_featured'] as bool? ?? false,
      languageId: json['language_id'] as String?,
      languageName: json['language_name'] as String?,
      languageCode: json['language_code'] as String?,
      viewerCount: json['viewer_count'] as int? ?? 0,
      maxViewers: json['max_viewers'] as int? ?? 0,
      isRecurring: json['is_recurring'] as bool? ?? false,
      recurrencePattern: RecurrenceType.values.firstWhere(
        (e) => e.name == (json['recurrence_pattern'] as String? ?? 'none'),
        orElse: () => RecurrenceType.none,
      ),
      recurrenceEndDate: json['recurrence_end_date'] != null
          ? DateTime.parse(json['recurrence_end_date'] as String)
          : null,
      parentStreamId: json['parent_stream_id'] as String?,
      streamQuality: json['stream_quality'] as String?,
      isChatEnabled: json['is_chat_enabled'] as bool? ?? true,
      chatUrl: json['chat_url'] as String?,
      youtubeVideoId: json['youtube_video_id'] as String?,
      vimeoVideoId: json['vimeo_video_id'] as String?,
      facebookVideoId: json['facebook_video_id'] as String?,
      customEmbedUrl: json['custom_embed_url'] as String?,
      isLive: json['is_live'] as bool? ?? false,
      liveViewerCount: json['live_viewer_count'] as int? ?? 0,
      totalViews: json['total_views'] as int? ?? 0,
      tags: (json['tags'] as List<dynamic>?)?.cast<String>() ?? [],
      customFields: json['custom_fields'] as Map<String, dynamic>?,
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
      churchName: json['church_name'] as String?,
      churchLogoUrl: json['church_logo_url'] as String?,
      churchCity: json['church_city'] as String?,
      churchCountry: json['church_country'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'church_id': churchId,
      'title': title,
      'description': description,
      'slug': slug,
      'stream_url': streamUrl,
      'platform': platform.name,
      'platform_id': platformId,
      'thumbnail_url': thumbnailUrl,
      'scheduled_start': scheduledStart?.toIso8601String(),
      'scheduled_end': scheduledEnd?.toIso8601String(),
      'actual_start': actualStart?.toIso8601String(),
      'actual_end': actualEnd?.toIso8601String(),
      'status': status.name,
      'is_featured': isFeatured,
      'language_id': languageId,
      'viewer_count': viewerCount,
      'max_viewers': maxViewers,
      'is_recurring': isRecurring,
      'recurrence_pattern': recurrencePattern.name,
      'recurrence_end_date': recurrenceEndDate?.toIso8601String(),
      'parent_stream_id': parentStreamId,
      'stream_quality': streamQuality,
      'is_chat_enabled': isChatEnabled,
      'chat_url': chatUrl,
      'youtube_video_id': youtubeVideoId,
      'vimeo_video_id': vimeoVideoId,
      'facebook_video_id': facebookVideoId,
      'custom_embed_url': customEmbedUrl,
      'is_live': isLive,
      'live_viewer_count': liveViewerCount,
      'total_views': totalViews,
      'tags': tags,
      'custom_fields': customFields,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  factory LivestreamModel.fromEntity(Livestream livestream) {
    return LivestreamModel(
      id: livestream.id,
      churchId: livestream.churchId,
      title: livestream.title,
      description: livestream.description,
      slug: livestream.slug,
      streamUrl: livestream.streamUrl,
      platform: livestream.platform,
      platformId: livestream.platformId,
      thumbnailUrl: livestream.thumbnailUrl,
      scheduledStart: livestream.scheduledStart,
      scheduledEnd: livestream.scheduledEnd,
      actualStart: livestream.actualStart,
      actualEnd: livestream.actualEnd,
      status: livestream.status,
      isFeatured: livestream.isFeatured,
      languageId: livestream.languageId,
      languageName: livestream.languageName,
      languageCode: livestream.languageCode,
      viewerCount: livestream.viewerCount,
      maxViewers: livestream.maxViewers,
      isRecurring: livestream.isRecurring,
      recurrencePattern: livestream.recurrencePattern,
      recurrenceEndDate: livestream.recurrenceEndDate,
      parentStreamId: livestream.parentStreamId,
      streamQuality: livestream.streamQuality,
      isChatEnabled: livestream.isChatEnabled,
      chatUrl: livestream.chatUrl,
      youtubeVideoId: livestream.youtubeVideoId,
      vimeoVideoId: livestream.vimeoVideoId,
      facebookVideoId: livestream.facebookVideoId,
      customEmbedUrl: livestream.customEmbedUrl,
      isLive: livestream.isLive,
      liveViewerCount: livestream.liveViewerCount,
      totalViews: livestream.totalViews,
      tags: livestream.tags,
      customFields: livestream.customFields,
      createdAt: livestream.createdAt,
      updatedAt: livestream.updatedAt,
      churchName: livestream.churchName,
      churchLogoUrl: livestream.churchLogoUrl,
      churchCity: livestream.churchCity,
      churchCountry: livestream.churchCountry,
    );
  }

  Livestream toEntity() {
    return Livestream(
      id: id,
      churchId: churchId,
      title: title,
      description: description,
      slug: slug,
      streamUrl: streamUrl,
      platform: platform,
      platformId: platformId,
      thumbnailUrl: thumbnailUrl,
      scheduledStart: scheduledStart,
      scheduledEnd: scheduledEnd,
      actualStart: actualStart,
      actualEnd: actualEnd,
      status: status,
      isFeatured: isFeatured,
      languageId: languageId,
      languageName: languageName,
      languageCode: languageCode,
      viewerCount: viewerCount,
      maxViewers: maxViewers,
      isRecurring: isRecurring,
      recurrencePattern: recurrencePattern,
      recurrenceEndDate: recurrenceEndDate,
      parentStreamId: parentStreamId,
      streamQuality: streamQuality,
      isChatEnabled: isChatEnabled,
      chatUrl: chatUrl,
      youtubeVideoId: youtubeVideoId,
      vimeoVideoId: vimeoVideoId,
      facebookVideoId: facebookVideoId,
      customEmbedUrl: customEmbedUrl,
      isLive: isLive,
      liveViewerCount: liveViewerCount,
      totalViews: totalViews,
      tags: tags,
      customFields: customFields,
      createdAt: createdAt,
      updatedAt: updatedAt,
      churchName: churchName,
      churchLogoUrl: churchLogoUrl,
      churchCity: churchCity,
      churchCountry: churchCountry,
    );
  }
}
